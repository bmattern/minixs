#!/usr/bin/env python
import sys
import minixs as mx
import numpy as np
import matplotlib.pyplot as pt
import matplotlib.cm as cm

from mpl_toolkits.axes_grid import make_axes_locatable

calfile = sys.argv[1]

cal = mx.calibrate.load(calfile)
print cal.filters

c = cal.calibration_matrix.copy()

print "re-calibrating to generate fit points..."
cal.calibrate()

if np.any(np.abs(c - cal.calibration_matrix) > 5e-4):
  print "Warning: re-calibrated matrix differs from original. Was the original generated with  different version of the software? Showing residuals for new calibration matrix."

c = cal.calibration_matrix

fig = pt.figure()
ax = pt.gca()

# plot fit points and contours of final matrix

x,y,z = cal.fit_points.T
ax.scatter(x, y, c=z, s=5, linewidths=0, cmap=cm.jet)
ax.contour(c, cal.energies, cmap=cm.jet)
pt.xlim(0,500)
pt.ylim(0,200)

divider = make_axes_locatable(ax)
axResx = divider.new_vertical("50%", pad=0.1, pack_start=False)
fig.add_axes(axResx)
#axResy = divider.new_horizontal(1.2, pad=0.1, pack_start=False)
#fig.add_axes(axResy)

all_res = np.array([])
for i, ((x1,y1),(x2,y2)) in enumerate(cal.xtals):
  pts = np.array([(x,y,z) for x,y,z in cal.fit_points if x1<=x<x2 and y1<=y<y2])
  fit = mx.calibrate.evaluate_fit(cal.fits[i], pts[:,0], pts[:,1])

  res = fit - pts[:,2]
  all_res = np.append(all_res, res)
  mean = np.mean(res)
  sigma = np.std(res)

  axResx.scatter(pts[:,0], res, s=10, c=pts[:,2], linewidths=0, cmap=cm.jet)
  axResx.hlines([mean+2*sigma, mean-2*sigma], x1,x2)
  #axResy.plot(fit - pts[:,2], pts[:,1], '.')

axResx.xaxis.set_label_position('top')
ax.set_xlim(0,500)
axResx.set_xlim(0,500)
ax.set_ylim(0,200)
pt.draw()

pt.figure()
pt.hist(all_res, 30)
pt.show()
