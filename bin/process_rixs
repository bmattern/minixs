#!/usr/bin/env python
import sys
try:
  import argparse
except ImportError:
  sys.stderr.write("This script requires the argparse module from python 2.7 or higher.\n")
  exit()
import minixs as mx
import numpy as np
import os

# create argument parser
# XXX add arguments for bad pixels (either list or file)
epilog="""The -E option can be used to specify which column contains the mono energy. If left unspecified, the first column that contains either of the strings 'mono' or 'energy' (case insensitive) in its header is used. Likewise, the -I option is used to set the I0 column. If left off, the first column containing 'i0' is used. For both of these options, the leftmost column is 1 (not 0).

It is possible to sum data from several identical scans. To do so, simply specify multiple scan files in the --scans options. All scan files given must contain the same energy points. The exposure files for the first scan should be listed first, followed by those for the second, etc. A check is made to ensure that the number of exposure files is a multiple of the number of energy points."""
parser = argparse.ArgumentParser(description='Process RIXS data', epilog=epilog, formatter_class=argparse.RawDescriptionHelpFormatter)
parser.add_argument('calibration_file', help='Calibration File')
parser.add_argument('--scans', '-s', nargs='+', help='Scan File(s)', required=True, metavar='SCANFILE') 
parser.add_argument('--exposures', '-e', nargs='+', help='Exposure File(s)', required=True, metavar='EXPOSURE_FILE')
parser.add_argument('--outfile', '-o', help='Output Filename') 
parser.add_argument('-E', '--energy-column', type=int, help='Energy Column (1 indexed)') 
parser.add_argument('-I', '--i0-column', type=int, help='I0 Column (1 indexed)') 
parser.add_argument('-H', '--high-filter', type=int, help='High Count Filter (for bad pixels)') 
parser.add_argument('--bad-pixels', '-b', help='Bad Pixels (colon separated list of comma separated points. e.g. "100,23:425,10")') 

args = parser.parse_args()

def progress_cb(i, energy):
  sys.stdout.write(".")
  sys.stdout.flush()

# The Windows command shell does not expand glob expressions (e.g. foo*),
# so we do that manually here for scans and exposures.
import platform
if platform.system() == 'Windows':
  import glob, operator
  sorted_glob = lambda x: sorted(glob.glob(x))
  args.exposures = reduce(operator.add, map(sorted_glob, args.exposures))
  args.scans = reduce(operator.add, map(glob.glob, args.scans))

# read in scan files
energies = None
I0s = None

for scan in args.scans:
  s = mx.scanfile.ScanFile(scan)

  # if energy column is not specified
  energy_column = args.energy_column
  if energy_column is None:
    energy_column = s.find_column('mono')
    if energy_column is None:
      energy_column = s.find_column('energy')
    if energy_column is None:
      sys.stderr.write("Unable to determine which column of scan file contains monochrometer energy. Please specify using the -E option")
      exit()
    sys.stderr.write("Using column %d for monochrometer energy.\n" % (energy_column+1))

  # find I0 column if not specified
  i0_column = args.i0_column
  if i0_column is None:
    i0_column = s.find_column('i0')
    if i0_column is None:
      sys.stderr.write("Unable to determine which column of scan file contains I0. Please specify using the -E option")
      exit()
    sys.stderr.write("Using column %d for I0.\n" % (i0_column+1))

  e,i = s.data[:, [energy_column, i0_column]].transpose()

  if energies is None:
    energies = e
  else:
    print len(energies), len(e)
    diff = np.max(np.abs(energies - e))
    if diff > 0.25:
      print "Energies from scan %s differ from others. Aborting." % scan
      exit()

  if I0s is None:
    I0s = i
  else:
    I0s += i

# ensure that # of exposures is correct for number of entries in scan
if len(args.exposures) % len(energies) is not 0:
  print "Number of energies does not divide number of exposures. Aborting."
  exit()

calib = mx.calibrate.load(args.calibration_file)

filters = []

# setup bad pixel filter if needed
if args.bad_pixels:
  bad_pixels = [map(int, s.split(',')) for s in args.bad_pixels.split(':')]
  print bad_pixels

  fltr = mx.filter.BadPixelFilter()
  if calib.dispersive_direction in [mx.UP, mx.DOWN]:
    mode = fltr.MODE_INTERP_V
  else:
    mode = fltr.MODE_INTERP_H
  fltr.set_val((mode, bad_pixels))
  filters.append(fltr)

# add high filter
if args.high_filter is not None:
  fltr = mx.filter.HighFilter()
  fltr.set_val(args.high_filter)
  filters.append(fltr)

rixs = mx.rixs.RIXS()
rixs.exposure_files = [os.path.abspath(f) for f in args.exposures]
rixs.calibration_file = os.path.abspath(args.calibration_file)
rixs.energies = energies
rixs.I0s = I0s
rixs.filters = filters

c = calib.calibration_matrix
emission_energies = np.arange(c[np.where(c>0)].min(), c.max(), .25)

sys.stdout.write("Processing")
sys.stdout.flush()

try:
  rixs.process(emission_energies, progress_callback=progress_cb)
except mx.rixs.InvalidParameters:
  print("")
  print('\n'.join(rixs.errors))

print("")

print("Saving...")
rixs.save(args.outfile)
print("Done")

