#!/usr/bin/env python

#from optparse import OptionParser
import minixs as mx
import numpy as np
import sys, os
from optparse import OptionParser


parser = OptionParser()
parser.usage = "Usage: %prog --calib <calibration> --exposure <exposure file> --output <output file> [options]"

parser.add_option("-c", "--calib", dest='calibration_file',
                  help="calibration matrix file (*.calib)")
parser.add_option("-x", "--exposure", dest='exposure_file',
                  help="exposure file (*.tif)")
parser.add_option("-o", "--output", dest='outfile',
                  help="filename to save output to (*.xes)")
parser.add_option("-e", "--energy", dest='energy', default=0,
                  help="incident energy")
parser.add_option("-i", "--i0", dest='i0', default=1,
                  help="incident flux")
parser.add_option("-d", "--dataset", dest='dataset', default='',
                  help="dataset name")

(options, args) = parser.parse_args()

if not options.calibration_file or not options.exposure_file or not options.outfile:
  parser.print_help()
  exit()

# XXX make this configurable from command line (or better, autodetect...)
bad_pixels = [ (14, 185) ]

# setup bad pixel filter if needed
filters = []
if bad_pixels:
  fltr = mx.filter.BadPixelFilter()
  calib = mx.calibrate.load(options.calibration_file)
  if calib.dispersive_direction in [mx.UP, mx.DOWN]:
    mode = fltr.MODE_INTERP_V
  else:
    mode = fltr.MODE_INTERP_H
  fltr.set_val((mode, bad_pixels))
  filters.append(fltr)


# don't overwrite files willy nilly
if (os.path.exists(options.outfile)):
  sys.stdout.write("Do you want to overwrite '%s'? (y/n): " % options.outfile)
  response = sys.stdin.readline().strip().lower()
  if response[0] != 'y':
    exit()

# load calibration
c = mx.calibrate.load(options.calibration_file)
#XXX check that c is valid

# generate xes files
print "Processing..."
xes = mx.emission.EmissionSpectrum()
xes.dataset = options.dataset
xes.calibration_file = os.path.abspath(options.calibration_file)
xes.energy = options.energy
xes.exposure_files = [os.path.abspath(f) for f in [options.exposure_file]]
xes.I0 = options.i0
xes.filters = filters

xes.process()

print "Saving '%s'..." % options.outfile
xes.save(options.outfile)
print "Done"

